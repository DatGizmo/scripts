#!/usr/bin/python

import sys
import getopt
import psutil
import dbus
import pympris
import datetime
import math
import requests
from see import see
from subprocess import call
from subprocess import check_output
from gi.repository import GObject
from dbus.mainloop.glib import DBusGMainLoop
from mpd import MPDClient
reload(sys)
sys.setdefaultencoding('utf8')

SPOTIFY = 'org.mpris.MediaPlayer2.spotify'
SPOT_PATH = '/org/mpris/MediaPlayer2'
SPOT_VLC_IFACE = 'org.mpris.MediaPlayer2.Player'

class Player:
    Spotify = 'spotify'
    MPD = 'mpd'
    NONE = -1

class Tasks:
    Play = 1
    Stop = 2
    Next = 3
    Prev = 4
    Toggle = 5
    Pause = 6
    MetaData = 7
    Daemon = 8
    Tmux = 9
    VolInc = 10
    VolDec = 11
    SecFwd = 12
    SecBwd = 13
    Seek = 14
    Lyric = 15
    NONE = -1

class TitleData(object):
    def __init__(self, artist, album, track, title):
        self.artist = artist
        self.album = album
        self.track = track
        self.title = title
        self.lyric = ''

    def __str__(self):
        retval = ''
        if self.artist:
            retval += self.artist + " - "
        if self.album:
            retval += self.album + " - "
        if self.track:
            retval += self.track + "."
        if self.title:
            retval += self.title
        if not retval:
            retval = "No data set"
        return retval

    def toString(self):
        return self.__str__()

    def getLyric(self):
        if not self.lyric:
            payload = {'artist': self.artist, 'title': self.title}
            r = requests.get('https://makeitpersonal.co/lyrics', params = payload)
            self.lyric = r.text

        print self
        print ""
        print self.lyric


target = Player.NONE
task = Tasks.NONE
seekTime = 0
songData = None

def printhelp():
    print('playerctrl -a <action> [--player <player>]')
    print('     actions: play (-P)')
    print('              stop (-s)')
    print('              next (-n)')
    print('              prev (-p)')
    print('              toggle (-t)')
    print('              pause ')
    print('              metadata (-m)')
    print('              tmux (--tmux)')
    print('              daemon (-d): Only works with spotify')
    print('     player:  if player is empty the player is auto detected')
    print('              spotify')
    print('              mpd')

def parscmd(argv):
    global task, target, seekTime, songData
    try:
        opts, args = getopt.getopt(argv, "lidhtsnmpa:P", ["help", "action=", "player=", "tmux", "sf", "sb", "seek=", "artist=", "title="])
    except getopt.GetoptError:
        printhelp()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h' :
            printhelp()
            sys.exit()
        elif opt == '-t':
            task = Tasks.Toggle
        elif opt == '-s':
            task = Tasks.Stop
        elif opt == '-n':
            task = Tasks.Next
        elif opt == '-p':
            task = Tasks.Prev
        elif opt == '-m':
            task = Tasks.MetaData
        elif opt == '-P':
            task = Tasks.Play
        elif opt == '-d':
            task = Tasks.VolDec
        elif opt == '-i':
            task = Tasks.VolInc
        elif opt == '-l':
            task = Tasks.Lyric
        elif opt in ("-a", "--action"):
            if(arg == 'play'):
                task = Tasks.Play
            elif(arg == 'stop'):
                task = Tasks.Stop
            elif(arg == 'next'):
                task = Tasks.Next
            elif(arg == 'previous'):
                task = Tasks.Prev
            elif(arg == 'toggle'):
                task = Tasks.Toggle
            elif(arg == 'pause'):
                task = Tasks.Pause
            elif(arg == 'metadata'):
                task = Tasks.MetaData
            elif(arg == 'tmux'):
                task = Tasks.Tmux
            else:
                print("Unkown task")
                printhelp()
        elif opt in ("--player"):
            if(arg == 'spotify'):
                target = Player.Spotify
            elif(arg == 'mpd'):
                target = Player.MPD
            else:
                print("Unkown player")
                printhelp()
                sys.exit(1)
        elif opt in ("--tmux"):
            task = Tasks.Tmux
        elif opt in ("--sf"):
            task = Tasks.SecFwd
        elif opt in ("--sb"):
            task = Tasks.SecBwd
        elif opt in ("--seek"):
            task = Tasks.Seek
            timestr = arg
            inx = timestr.find(":")
            if(inx > 0):
                seekTime = int(timestr[:inx])*60
                seekTime += int(timestr[inx+1:])
            else:
                seekTime = timestr
        elif opt in ("--artist"):
            if songData is None:
                songData = TitleData(arg, '', '', '')
            else:
                songData.artist = arg
        elif opt in ("--title"):
            if songData is None:
                songData = TitleData('', '', '', title)
            else:
                songData.title = arg
        else:
            print("Unkown option %s"% opt);
            printhelp()
            sys.exit(1)

def getPid(player):
    for p in psutil.process_iter():
        if str(player) in str(p.name):
            return True
    return False
    
def getRunningPlayer():
    if(getPid(Player.Spotify)):
        return Player.Spotify
    elif(getPid(Player.MPD)):
        return Player.MPD
    else:
        return Player.NONE

def getMetaData(mplayer):
    return TitleData(mplayer.player.Metadata['xesam:artist'][0], mplayer.player.Metadata['xesam:album'], str(mplayer.player.Metadata['xesam:trackNumber']), mplayer.player.Metadata['xesam:title'])

def writeToFile(string):
    fp = open("/home/swe/tmp/watch", "w")
    unic = string.encode("UTF-8", "strict")
    fp.write(unic)
    fp.close()

def sendDbus(player, action):
    dest=''
    path=''
    iface_name=''

    if(player == Player.Spotify):
        dest=SPOTIFY
        path=SPOT_PATH
        iface_name=SPOT_VLC_IFACE
    else:
        print('No supporte player!')
        sys.exit(2)

    bus = dbus.SessionBus()
    obj = bus.get_object(dest, path)
    iface = dbus.Interface(obj, dbus_interface=iface_name)
   
    if(action == Tasks.Play):
        iface.Play()
    elif(action == Tasks.Pause):
        iface.Pause()
    elif(action == Tasks.Stop):
        iface.Stop()
    elif(action == Tasks.Next):
        iface.Next()
    elif(action == Tasks.Prev):
        iface.Previous()
    elif(action == Tasks.Toggle):
        iface.PlayPause()
    elif(action == Tasks.MetaData or action == Tasks.Tmux):
        players_ids = list(pympris.available_players())
        mp = pympris.MediaPlayer(players_ids[0], bus)
        status = mp.player.PlaybackStatus
        if 'play' in status.lower():
            titel = getMetaData(mp)
            if(action == Tasks.Tmux):
                writeTmux(titel.toString())
            else:
                print(titel)
        else:
            print("Pause/Stopped")
        
def getMpdMetadata(mpc):
    song = mpc.currentsong()
    artist = ''
    album = ''
    track = ''
    title = ''
    td = TitleData(artist, album, track, title)
    if 'artist' in song:
        td.artist = song['artist']
    if 'album' in song:
        td.album = song['album']
    if 'track' in song:
        td.track = song["track"]
    if 'title' in song:
        td.title = song['title']
    
    return td

def writeTmux(titel):
    printstr=""
    maxlen = 40
    mod = 15
    length = len(titel)
    steps = int(math.ceil((float(length)+3)/mod))

    if length > maxlen:
        now = datetime.datetime.now()
        start = now.second % mod
        start *= steps
        if start >= length:
            start = 0
        end = start + maxlen
        if end > length:
            end = length

        printstr = titel[start:end]
        prlen = len(printstr)
        if(prlen < maxlen):
            printstr = printstr + " | " + titel[0:(maxlen-prlen)]
            printstr = printstr[0:maxlen]
        print(printstr).encode('utf-8')
    else:
        print(titel).encode('utf-8')

def sendMpd(action):

    mpc = MPDClient()
    mpc.timeout = 10
    mpc.idletimeout = None
    mpc.connect("MpdHost", 6600)
    mpc.password("GizmoMpD")

    if(action == Tasks.Play):
        mpc.play()
    elif(action == Tasks.Pause):
        mpc.pause()
    elif(action == Tasks.Stop):
        mpc.stop()
    elif(action == Tasks.Next):
        mpc.next()
    elif(action == Tasks.Prev):
        mpc.previous()
    elif(action == Tasks.Toggle):
        if(mpc.status()['state'] != "play"):
            mpc.play()
        else:
            mpc.pause()
    elif(action == Tasks.VolInc):
        vol = int(mpc.status()['volume'])
        mpc.setvol(vol+3)
    elif(action == Tasks.VolDec):
        vol = int(mpc.status()['volume'])
        mpc.setvol(vol-3)
    elif(action == Tasks.SecBwd):
        mpc.seekcur("-30")
    elif(action == Tasks.SecFwd):
        mpc.seekcur("+30")
    elif(action == Tasks.Seek):
        mpc.seekcur(seekTime)
    elif(action == Tasks.MetaData or action == Tasks.Tmux):
        if(mpc.status()['state'] != "play"):
            print("Pause/Stopped")
        else:
            titel = getMpdMetadata(mpc)
            if(action == Tasks.Tmux):
                writeTmux(titel.toString())
            else:
                print titel
    elif(task == Tasks.Lyric):
        td = getMpdMetadata(mpc)
        td.getLyric()

    mpc.close()

def handle_properties_changes(changed_props, invalidated_props):
    status = ""
    title = ""
#    print(changed_props.items())
    for name, value in changed_props.items():
        if "PlaybackStatus" in name:
            status = value
        elif "Metadata" in name:
            if(len(value) > 0):
                title = getMetaData(mp)
    if not status:
        status = mp.player.PlaybackStatus

    if not "play" in status.lower():
        writeToFile("Pause/Stopped")
    elif title:
       writeToFile(title.toString())
    else:
        writeToFile(getMetaData(mp).toString())

def runDaemon():
    global mp
    dbus_loop = DBusGMainLoop()
    bus = dbus.SessionBus(mainloop=dbus_loop)
    players_ids = list(pympris.available_players())
    for player in players_ids:
        mplayer = pympris.MediaPlayer(player, bus)
        if "spoti" in mplayer.root.Identity.lower():
            mp = mplayer
            break

    if not mp:
        print "Spotify not found, exiting"
        return -1

    mp.player.register_properties_handler(handle_properties_changes)
    loop = GObject.MainLoop()
    loop.run()

def main(argv):
    global task, target, songData
    parscmd(argv)
    if(target == Player.NONE):
        target = getRunningPlayer()

    if(task == Tasks.Daemon):
        runDaemon()
    elif(task == Tasks.Lyric and songData != None):
        songData.getLyric()
    elif(target == Player.NONE):
        print("No player running")    
    elif(target == Player.MPD):
        sendMpd(task)
    else:
        sendDbus(target, task)

if __name__ == "__main__":
    main(sys.argv[1:])
